#!/bin/bash

## Author: Bishr Ghalil
## Last edit: Oct 28 2021
## Version: 2.0
##
## yt-cli: search videos and playlists on youtube and play them in mpv, without an API 
## 
## Usage: yt-cli [OPTION...] [COMMAND]...
## Options:
##   -u="url", --url="url"  Uses this url
##   -d, --download         Download the video
##   -r, --rofi	 	    Takes input and prompts using rofi
##   -m, --dmenu	    Takes input and prompts using dmenu
## Commands:
##   -h, --help             Displays this help and exists
##   -v, --version          Displays output version and exists

# VARIABLES

version="Version 2.0"

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"

promptcmd="fzf --with-nth=2..-1"
formats="0. audio only\n \
1. 144px\n \
2. 240px\n \
3. 360px\n \
4. 480px\n \
5. 720px\n \
6. 1080px\n \
exit"

help_msg="\n\
Usage: yt-cli [OPTION...] [COMMAND]...\n\n\
Options:\n\
  -u=\"url\", --url=\"url\"\tUses this url\n\
  -d, --download\t\tDownload the video\n\
  -r, --rofi\t\ttakes input and prompts using rofi\n\
  -m, --dmenu\t\ttakes input and prompts using dmenu\n\
Commands:\n\
  -h, --help\t\tDisplays this help and exists\n\
  -v, --version\t\tDisplays output version and exists\n\n\
Author: Bishr Ghalil\n\
$version
"

# download flag
dflag=0
# url flag
uflag=0
# rofi flag
rflag=0
# dmenu flag
mflag=0
# prompt to choose the video quality
video_format(){

	tmp_choice=$(
	    echo -e "$formats" | \
	    $promptcmd | \
	    awk '{ print $1 }' | \
	    sed 's/\.//g'
	);

	case $tmp_choice in
	    0) ytdl_id="251";;
	    1)
		ytdl_id="160+251";;
	    2)
		ytdl_id="133+251";;
	    3)
		ytdl_id="134+251";;
	    4)
		ytdl_id="135+251";;
	    5)
		ytdl_id="136+251";;
	    6)
		ytdl_id="137+251";;
	    exit)
		exit 0;;
	esac
}

for i in "$@"
do
case $i in
    -h|--help)
	echo -e $help_msg;
	exit;
    ;;
    -v|--version)
	echo -e "yt-cli: $version";
	exit;;
    -u=*|--url=*)
	uflag=1;
	URL=$(echo $i | sed 's/[-a-zA-Z]*=//');
    ;;
    -d|--download)
	dflag=1;
    ;;
    -r|--rofi)
	if [[ $mflag == 1 ]]
	then
	    echo -e "$c_red" "(-r) Can't be used with (-m, --menu) options" "$c_reset";
	    exit;
	fi
	rflag=1;
	promptcmd="rofi -dmenu -no-custom -p Video:";
    ;;
    -m|--dmenu)
	if [[ $rflag == 1 ]]
	then
	    echo -e "$c_red" "(-m) Can't be used with (-r, --rofi) options" "$c_reset";
	    exit; 
	fi
	mflag=1;
	promptcmd="dmenu -l 20 -p Video:";
    ;;
    *)
	echo -e "$c_red" "Unknown command" "$c_reset";
	echo -e $help_msg;
	exit;
esac
done

if [[ $uflag == 1 ]]
then
    video_format;
    if [[ $dflag == 1 ]]
    then
	echo -e "$c_green" "Downloading..." "$c_reset";
	youtube-dl -f $ytdl_id "$URL";
	exit;
    fi
    flags="--ytdl-format=$ytdl_id";
    mpv "$flags" "$URL";
    exit;
fi

echo -n "Search: ";
read -r query;

if [ -z "$query" ]
then
    exit;
fi

# sanitise the query
query=$(sed \
	-e 's|+|%2B|g'\
	-e 's|#|%23|g'\
	-e 's|&|%26|g'\
	-e 's| |+|g'\
	<<< "$query")

# fetch the results with the $query 
echo -e "$c_green" "Searching ..." "$c_reset"
response=$(curl -s "https://www.youtube.com/results?search_query=$query")
vgrep='"videoRenderer":{"videoId":"\K.{11}".+?"text":".+?[^\\](?=")'
pgrep='"playlistRenderer":{"playlistId":"\K.{34}?","title":{"simpleText":".+?[^\"](?=")'
# grep the video id and title
# replace " with “ so that entire title is displayed even if it has "
videoids=$(
	echo "$response" | \
	grep -oP "$vgrep" | \
	sed 's|\\\"|“|g' | \
	awk -F\" '{ print $1 "\t\t\t\t" $NF}'
)
# grep the playlist id and title
# replace " with “ so that entire title is displayed even if it has "
playlistids=$(
	echo "$response" | \
	grep -oP "$pgrep" | \
	sed 's|\\\"|“|g' | \
	awk -F\" '{ print $1 "\t(playlist) " $NF }'
)
# if there are playlists, append them to list
[ -n "$playlistids" ] && ids="$playlistids\n"
# if there are videos, append them to list
[ -n "$videoids" ] && ids="$ids$videoids"
# url prefix for videos and playlists
videolink="https://youtu.be/"
playlink="https://youtube.com/playlist?list="
# prompt the results to user infinitely until they exit (escape)
while true; do
	id=$(
		echo -e "$ids" "\nexit" | \
		$promptcmd | \
		cut -d'	' -f1
	)
	if [[ $id == "exit" ]]
	then
	    echo -e "$c_red" "Exiting..." "$c_reset"
	    exit 0;
	fi
	video_format
	flags="--ytdl-format=$ytdl_id"

	case $id in
		# 11 digit id = video
		???????????)
		    clear;
		    echo -e "$c_green" "[#] Running..." "$c_reset";
		    
		    if [[ $dflag == 1 ]]
		    then
			youtube-dl -f $ytdl_id "$videolink$id";
			exit;
		    fi

		    mpv "$videolink$id" "$flags";;
		# 34 digit id = playlist
		??????????????????????????????????)
		    clear;
		    echo -e "$c_green" "[#] Running the playlist..." "$c_reset";

		    if [[ $dflag == 1 ]]
		    then
			youtube-dl -f $ytdl_id "$videolink$id";
			exit;
		    fi

		    mpv "$playlink$id" "$flags";;
		"")
		    exit;;
		*)
		    echo "invalid id - $id" ;;
	esac
done
